[{"title":"Validations and File Caching using ActiveStorage","date":"2019-07-20T21:39:05.000+00:00","description":null,"creator":"Andrew Courter","content":"\u003cp\u003eI work for a small consultancy, EarthVectors, Inc, and we get to work in a variety of domains and spaces where we help clients solve both business and technical problems every day. I recently ran into an interesting case around ActiveStorage and validations and figured I would share my experiences.\u003c/p\u003e\u003cp\u003eThe application is a standard Rails application using ActiveStorage and erb templates to render bootstrap forms and handle your typical CRUD (Create Read Update Delete) operations. During some manual testing of the app we uncovered an issue where after a failed validation, the files that were uploaded were removed and upon resubmission the user would get another failed validation that their file was missing. Definitely not the most intuitive user experience, so we decided it needed to be fixed.\u003c/p\u003e\u003cp\u003eWhen uncovering an issue like this I like to take a step back and understand why something is a problem before jumping into coming up with solutions. There are usually many solutions to a problem so understanding the tradeoffs between each is key to building great software. This particular issue was a problem because the user did not have a clear indication of what fields were required and in filling out the minimum fields needed for form submission would get into a bad state potentially causing a lot of frustration. We need to provide a solution that will allow the user to understand our expectations and to have a seamless experience without unexpected errors. Let’s explore a few solutions that could help make the workflow more clear to the user.\u003c/p\u003e\u003ch3\u003eSolution 1\u003c/h3\u003e\u003cp\u003eWe can let the user know what fields are required before they submit the form. If they know what we expect them to enter into the form before it is complete then we wouldn’t need to even worry about whether or not the photo is lost after a saved validation because they shouldn’t get into that state. Below is the file field that we need to add styling to and make sure the user can clearly see that this field is required. The ujs_target is used to trigger some javascript to load an image preview after the file input is changed.\u003c/p\u003e\u003cpre\u003e\u0026lt;%= form.file_field :photo, hide_label: \u003cstrong\u003etrue\u003c/strong\u003e, data: { ujs_target: \u0026quot;photo-input\u0026quot; }, help: \u0026quot;PNG or JPG only\u0026quot; %\u0026gt;\u003c/pre\u003e\u003cp\u003eFirst let’s start by adding a required class into our application.scss file. A convention for form fields is to make required fields red so let’s add a class to append some red text after the field input help text.\u003c/p\u003e\u003cpre\u003e.required small:after {\u003cbr\u003e  color: red;\u003cbr\u003e  content:\u0026quot; *Required\u0026quot;;\u003cbr\u003e  font-size: 0.5rem;\u003cbr\u003e  text-transform: uppercase;\u003cbr\u003e}\u003c/pre\u003e\u003cp\u003eNow that we have our CSS class, we need to add it to our file field. Because we are using a bootstrap_form_with we can do that by adding our class as a wrapper_class. After adding that class we should now see our Required text after the help for the file input text.\u003c/p\u003e\u003cpre\u003e\u0026lt;%= form.file_field :photo, wrapper_class: \u0026quot;required\u0026quot;, hide_label: \u003cstrong\u003etrue\u003c/strong\u003e, data: { ujs_target: \u0026quot;photo-input\u0026quot; }, help: \u0026quot;PNG or JPG only\u0026quot; %\u0026gt;\u003c/pre\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/688/1*FbY2A71lL2k0ESYpEh9j_g.png\" /\u003e\u003c/figure\u003e\u003cp\u003eSuccess! Now that we have a working example of applying styling to indicate required fields, what are the tradeoffs for implementing only this solution? First, we have clearly denoted which field is required and at a minimum the user should see this field and understand they have to fill it in before submitting the form. This solution was quick to implement and we could reuse it across all our file fields in the entire app relatively quickly. However, we are still dependent on the user doing the right thing. What happens if they STILL don’t see the text and submit an empty form? What if they are an evil user and try to break the system by submitting nothing? Let’s discuss another solution in Solution 2 that will give us more confidence that the system will work correctly even if the user submits empty data.\u003c/p\u003e\u003ch3\u003eSolution 2\u003c/h3\u003e\u003cp\u003eAnother solution to the problem would be to cache the photo so that the user does not have to re-upload after a failed validation and the photo is available even if the page refreshes. This gets at the root of the problem regardless of whether the user is evil or is just in a hurry and glances over any indications we have to denote that a field is required. Let’s see what it would take to implement something like that. Below is our file field that we would like to modify.\u003c/p\u003e\u003cpre\u003e\u0026lt;%= form.file_field :photo, hide_label: \u003cstrong\u003etrue\u003c/strong\u003e, data: { ujs_target: \u0026quot;photo-input\u0026quot; }, help: \u0026quot;PNG or JPG only\u0026quot; %\u0026gt;\u003c/pre\u003e\u003cp\u003eIf we were using CarrierWave as our image uploading solution then we would add a hidden field called photo_cache and that would provide the caching mechanism we would need. We can do something similar using ActiveStorage but need to provide the value to the hidden field. We need to get the signed_id from the photo so that ActiveStorage wires everything up correctly upon save. That information is available to us through the form using form.object.photo.signed_id. Additionally, we only want to add that hidden field if the photo has been attached, otherwise we expect the value to be attached using the file field. Let’s add that hidden field to the form so that we can start caching.\u003c/p\u003e\u003cpre\u003e\u0026lt;%= form.hidden_field :photo, value: form.object.photo.signed_id \u003cstrong\u003eif \u003c/strong\u003e@model.photo.attached? %\u0026gt;\u003cbr\u003e\u0026lt;%= form.file_field :photo, hide_label: \u003cstrong\u003etrue\u003c/strong\u003e, data: { ujs_target: \u0026quot;photo-input\u0026quot; }, help: \u0026quot;PNG or JPG only\u0026quot; %\u0026gt;\u003c/pre\u003e\u003cp\u003eSuccess! The user may not know that this field is required but at least they will not be forced to re-upload their photo if they received a validation error. As mentioned earlier, this solution gets at the root of the problem and is not dependent on human behavior for the system to work correctly. There are a couple drawbacks worth mentioning with this solution. The code is a bit more complicated than simply adding a CSS class and we would need to remember to do this across all places that we use file_fields. In order to make reuse easier we could extract this into a partial or form helper but that would also increase the complexity of the code for the sake of reuse. If there are many places that we want to reuse this code then that may be a good tradeoff to make.\u003c/p\u003e\u003ch3\u003eSolution 3\u003c/h3\u003e\u003cp\u003eAnother solution to the problem would be to prevent the user from submitting the form using front end validations. That way they know immediately that they are missing required fields before they even make a request to the server. Let’s see what adding the required attribute to enable the front end validation looks like.\u003c/p\u003e\u003cpre\u003e\u0026lt;%= form.file_field :photo, hide_label: \u003cstrong\u003etrue\u003c/strong\u003e, required: \u003cstrong\u003etrue\u003c/strong\u003e, data: { ujs_target: \u0026quot;photo-input\u0026quot; }, help: \u0026quot;PNG or JPG only\u0026quot; %\u0026gt;\u003c/pre\u003e\u003cp\u003eSuccess! This was pretty painless to add and we have prevented requests from even getting to our system if the user forgets to add required information. However, if we miss adding required to all the fields that are required then we can still get into a weird state where the file gets lost.\u003c/p\u003e\u003cp\u003eIn the end we went with a mix of all 3 solutions to provide the most amount of information to the user and to prevent losing files that they had just uploaded. Below is the final solution that we added to the codebase.\u003c/p\u003e\u003ch3\u003eFinal Solution\u003c/h3\u003e\u003cpre\u003e\u0026lt;%= form.hidden_field :photo, value: form.object.photo.signed_id \u003cstrong\u003eif \u003c/strong\u003e@model.photo.attached? %\u0026gt;\u003cbr\u003e\u0026lt;%= form.file_field :photo, wrapper_class: \u0026quot;required\u0026quot;, hide_label: \u003cstrong\u003etrue\u003c/strong\u003e, required: \u003cstrong\u003etrue\u003c/strong\u003e, data: { ujs_target: \u0026quot;photo-input\u0026quot; }, help: \u0026quot;PNG or JPG only\u0026quot; %\u0026gt;\u003c/pre\u003e\u003cp\u003eHappy coding!\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=e16418060f8f\" width=\"1\" height=\"1\"\u003e\u003chr\u003e\u003cp\u003e\u003ca href=\"https://medium.com/earthvectors/validations-and-file-caching-using-activestorage-e16418060f8f\"\u003eValidations and File Caching using ActiveStorage\u003c/a\u003e was originally published in \u003ca href=\"https://medium.com/earthvectors\"\u003eEarthVectors\u003c/a\u003e on Medium, where people are continuing the conversation by highlighting and responding to this story.\u003c/p\u003e"},{"title":"Outside-In Development","date":"2019-06-27T15:09:46.000+00:00","description":null,"creator":"David Madouros","content":"\u003cp\u003eHey there. David from EarthVectors here to teach you about one of my favorite techniques for front-end and/or API development — Outside-In Development.\u003c/p\u003e\u003cp\u003eI see many developers start by designing their model/table and work their way outward to the view. In fact, Rails even encourages this by focusing on “resources”. But what if, instead of working inside-out, we tried working outside-in? That’s what this technique is all about.\u003c/p\u003e\u003cp\u003eAdvantages of this technique are:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003eFaster Feedback\u003c/li\u003e\n\u003cli\u003eFewer assumptions\u003c/li\u003e\n\u003cli\u003eClearer separation of responsibilities\u003c/li\u003e\n\u003cli\u003eWorks for any front-end framework\u003c/li\u003e\n\u003cli\u003eIt’s fun!\u003c/li\u003e\n\u003c/ul\u003e\u003ch4\u003eFaster Feedback\u003c/h4\u003e\u003cp\u003eFast feedback is awesome and makes programming easier. It helps maintain sanity by limiting the number of mental balls that you need to juggle. Fast feedback alerts you early and often to mistakes that you make and makes debugging those mistakes a no brainer. Outside-In Development starts with “working” software and a feature spec and ensures that it continues to work as you make small changes that improve the design \u003cem\u003eand\u003c/em\u003e move from “working” to working.\u003c/p\u003e\u003ch4\u003eFewer Assumptions\u003c/h4\u003e\u003cp\u003eOne of the big downsides of inside-out development is that, sometimes, when you finally get to the UI, you find that it’s difficult to mold the UI to the expectations of your model. This can contribute to a difficult to use UX. It can also contribute to compromises made to the model (unless you’re willing to start over and re-think the model based on what you’ve learned at the UI layer). Outside-In Development doesn’t make any assumptions about the model and it has a tendency to create cleaner models and separation of responsibility.\u003c/p\u003e\u003ch4\u003eClearer Separation of Responsibilities\u003c/h4\u003e\u003cp\u003eIn layered architectures (like web-development), it is important to make boundaries between layers clear — separation of responsibilities. Views should not query the database. Controllers should route requests to the business domain layer. Outside-In Development pushes business logic into the business layer and keeps the View and Controller logic clean and simple.\u003c/p\u003e\u003ch4\u003eWorks for Any Front-End Framework\u003c/h4\u003e\u003cp\u003eIn my experience this works with any front-end (and back-end) framework. I used it extensively in Ruby and Rails environments — ERB, HAML, React (with or without Redux), and Backbone. I also used it with Elixir and Phoenix. It also works well with APIs (and is not just for front-end development). I’m not naive enough to claim it works for every situation, but I have yet to find a situation that it can’t help with.\u003c/p\u003e\u003ch4\u003eIt’s Fun!\u003c/h4\u003e\u003cp\u003eOutside-In Development is fun! It makes programming simple and the clean design at the end makes me feel good. It also allows me to conserve brain cycles for things that are truly difficult.\u003c/p\u003e\u003ch3\u003eOverview\u003c/h3\u003e\u003cp\u003eThe idea is relatively simple. I start with hard-coded values in HTML. For example, I hard-code each row in a table. Next, I extract the hard-coded values into a variable of hard-coded values. Then I push the hard-coded values down the stack until I can’t push it down any farther. Finally, I introduce a persistence layer. Throughout the process, I add unit tests where applicable.\u003c/p\u003e\u003ch4\u003eExample\u003c/h4\u003e\u003cp\u003eI’m writing a simple application for my favorite local used car dealership (DMad Motors). They want a page that lists their inventory of cars.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCaveat:\u003c/strong\u003e This \u003cem\u003eis \u003c/em\u003ea simple application, but it’s enough to demonstrate the technique. I often use a “simple” application to learn new techniques, languages, and tools (sounds like a future blog!).\u003c/p\u003e\u003ch4\u003eStep One: Introduce Hard-Coded List\u003c/h4\u003e\u003cp\u003eI start by hard-coding a simple list of cars. When doing a list like this I like to start with 2–3 items. One item isn’t a list. And more than three is cruel and unusual punishment. 😉\u003c/p\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/f8bc0c02cdf1f4c4ce0610f679a5a91e/href\"\u003ehttps://medium.com/media/f8bc0c02cdf1f4c4ce0610f679a5a91e/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/33af4e1c47506ba8498ee2a6b21cdb68.js\"\u003e\u003c/script\u003e\u003cp\u003eNote that at this stage it is \u003cem\u003ecritical\u003c/em\u003e that I write a feature spec to verify the table contents. The feature spec is what makes this technique work and allows me to treat the upcoming changes as a large-scale refactoring.\u003c/p\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/6e02ee1be9d6c559b3ace3534d38d0cb/href\"\u003ehttps://medium.com/media/6e02ee1be9d6c559b3ace3534d38d0cb/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/fe8c76cbfaf066cc736375eff8db3f98.js\"\u003e\u003c/script\u003e\u003ch4\u003eStep Two: Extract Hard-Coded List into Variable\u003c/h4\u003e\u003cp\u003eNext up, I extract the hard-coded values into an Array and introduce a loop for the rows in the table.\u003c/p\u003e\u003cp\u003eI’m choosing to use OpenStruct here. I prefer this to a Hash because it allows me to convert to some more concrete type of object later (e.g., ActiveRecord objects). Some people may prefer Struct for performance, but I know from experience that using OpenStruct is temporary and I find it easier to work with.\u003c/p\u003e\u003cp\u003eAlso, I could use a plain variable (i.e., cars) instead of an instance variable (i.e., @cars), but using @cars prepares me for moving this to the controller.\u003c/p\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/a66270690c6e091adf8e80e446191afd/href\"\u003ehttps://medium.com/media/a66270690c6e091adf8e80e446191afd/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/34a8ccf47695d1f78d8fd2c3fe7f9929.js\"\u003e\u003c/script\u003e\u003cp\u003eNo changes to specs are necessary!\u003c/p\u003e\u003ch4\u003eStep Three: Push Data Down a Layer (i.e. from View to Controller)\u003c/h4\u003e\u003cp\u003eThen I move the hard-coded list into the controller.\u003c/p\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/2cb4bac555ffacf7a8c0e748a48d4c4e/href\"\u003ehttps://medium.com/media/2cb4bac555ffacf7a8c0e748a48d4c4e/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/859c3b36b73a5efe940352a708d7e913.js\"\u003e\u003c/script\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/d178a685c91c51dd0c946ddf69aea58e/href\"\u003ehttps://medium.com/media/d178a685c91c51dd0c946ddf69aea58e/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/152cc5f28b4f166ca9724d0da2dbc420.js\"\u003e\u003c/script\u003e\u003cp\u003eI also introduce a controller spec (yes, I still write controller specs).\u003c/p\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/9e1284b663687e6a810f38547b5e76db/href\"\u003ehttps://medium.com/media/9e1284b663687e6a810f38547b5e76db/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/d9944bbffddfe3b1e939088024c74c53.js\"\u003e\u003c/script\u003e\u003ch4\u003eStep Four: Introduce Persistence\u003c/h4\u003e\u003cp\u003eFinally, there’s nowhere else that I can push the hard-coded list of cars down to and it’s time to introduce some persistence. I create a migration, create a Car model, and update both the controller spec and feature spec to persist Car instances and remove the use of OpenStruct.\u003c/p\u003e\u003cp\u003eHere is the final list:\u003c/p\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/2cb4bac555ffacf7a8c0e748a48d4c4e/href\"\u003ehttps://medium.com/media/2cb4bac555ffacf7a8c0e748a48d4c4e/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/859c3b36b73a5efe940352a708d7e913.js\"\u003e\u003c/script\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/c729a64269e8b419ac30eb3bdfb50dd3/href\"\u003ehttps://medium.com/media/c729a64269e8b419ac30eb3bdfb50dd3/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/b63002d4bf69f8d3ef2e83c587eeb526.js\"\u003e\u003c/script\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/eb4a88076af56fc5ae18e8908f6a83bb/href\"\u003ehttps://medium.com/media/eb4a88076af56fc5ae18e8908f6a83bb/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/a0c8d13c16e44d271c41ae0c78ac8339.js\"\u003e\u003c/script\u003e\u003cp\u003eAnd the specs:\u003c/p\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/9b7c2fd8dc25aedbad115e685f6e379c/href\"\u003ehttps://medium.com/media/9b7c2fd8dc25aedbad115e685f6e379c/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/bf19eab5a09d09268d6b30ac91f4382e.js\"\u003e\u003c/script\u003e\u003ciframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"\u003e\u003ca href=\"https://medium.com/media/08c3b14c17d77b1367ac6104b1a1d291/href\"\u003ehttps://medium.com/media/08c3b14c17d77b1367ac6104b1a1d291/href\u003c/a\u003e\u003c/iframe\u003e\u003cscript src=\"https://gist.github.com/dmadouros/7c7e844904d1975b41bcc34cbf6e0ff8.js\"\u003e\u003c/script\u003e\u003ch3\u003eSummary\u003c/h3\u003e\u003cp\u003eThis is a simple technique that has a lot of upside for very little cost. It works great when pairing because you and your pair can take turns implementing steps and the process of moving from hard-coded values to persistence ensures that you and your pair are on the same page. Give this a try. I think you’ll like it and I hope you have as much fun using it as I do.\u003c/p\u003e\u003cp\u003eHappy Coding!\u003c/p\u003e\u003cp\u003eCode: \u003ca href=\"https://github.com/dmadouros/dmad_motors\"\u003ehttps://github.com/dmadouros/dmad_motors\u003c/a\u003e\u003c/p\u003e\u003cp\u003eApp: \u003ca href=\"https://dmad-motors.herokuapp.com/\"\u003ehttps://dmad-motors.herokuapp.com/\u003c/a\u003e\u003c/p\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026amp;referrerSource=full_rss\u0026amp;postId=c22006d1a66d\" width=\"1\" height=\"1\"\u003e\u003chr\u003e\u003cp\u003e\u003ca href=\"https://medium.com/earthvectors/outside-in-development-c22006d1a66d\"\u003eOutside-In Development\u003c/a\u003e was originally published in \u003ca href=\"https://medium.com/earthvectors\"\u003eEarthVectors\u003c/a\u003e on Medium, where people are continuing the conversation by highlighting and responding to this story.\u003c/p\u003e"},{"title":"An EarthVectors developer’s life","date":"2019-05-31T20:38:43.000+00:00","description":null,"creator":"Kim Hendrick","content":"\u003cp\u003eI was inspired by Lisa Crispin’s post, \u003ca href=\"https://www.pivotaltracker.com/blog/a-day-in-the-life-testing-on-the-tracker-team\"\u003eA DAY IN THE LIFE: TESTING ON THE TRACKER TEAM\u003c/a\u003e, and wanted to share how we work on the EarthVectors development team.\u003c/p\u003e\u003cp\u003eWhile engaged with \u003ca href=\"https://athn.org/\"\u003eATHN\u003c/a\u003e, a non-profit serving the hemophilia and thrombosis community I was a part of the small 6-person development team located in Denver, CO. We previously worked with Pivotal Labs, and we are lucky enough to share space with them as well as the Pivotal Tracker team. We get some amazing perks.\u003c/p\u003e\u003cp\u003eIn fact, we start our day with catered breakfast.\u003c/p\u003e\u003cp\u003eAfter breakfast, a cowbell rings signaling us that it’s time for Pivotal standup where we get to meet new people, share helps, interestings, and events with each other. I love being involved in Pivotal standup. We often hear things about technologies that we would otherwise have no exposure to, especially given that we are such a small team. It’s amazing how much you can pick up just from overhearing other people’s problems and solutions.\u003c/p\u003e\u003cp\u003eNext, we head to our EarthVectors standup, where the six of us join a meeting with the remote portion of the technical team. Standup is a time to briefly share what we did yesterday, but mostly talk about anything interesting or surprising that came up. It’s also a time to share design decisions we made and get input from the rest of the team. We have ad-hoc “dev meetings” throughout the day to help make design decisions as well to foster joint ownership of the code.\u003c/p\u003e\u003cp\u003eBecause we work in pairs, standup is presented as what “we” did, “we” discovered, “we” would like input on. It’s a subtle but amazingly effective way to build a team and ownership of the code and product.\u003c/p\u003e\u003cp\u003eSomething we do a little differently is IPM (iteration planning meeting). Instead of a formal, scheduled meeting to review stories, we do it as needed. After standup is a good time to do a checkpoint and make sure we all have enough work to do. If not, we discuss and estimate enough stories to make sure we keep the flow going during the day. We only have three point sizes, and some of them don’t count.\u003c/p\u003e\u003cp\u003eWe estimate stories as 0, 1, 2 or 3. But a 0 and a 3 are exceptions. Most stories are 1’s or 2’s. We don’t argue about point sizes for very long, we just make sure everyone has the same understanding on level of effort, complexity, and unknowns, and then reach a consensus between a 1 or 2. In the end, we know that the points sizes are just estimates. Accuracy is not the end goal. Splitting a story that’s either bigger than a 2 or that would be easier to deliver in pieces is common. This helps us get feedback as quickly as possible. Yesterday we split two stories. Although their point sizes didn’t change, we divided them into different slices so that we could deliver the most complicated part first. We could then make sure it looks and works correctly. Subsequently we can deliver the next story that just adds more of the same type of logic.\u003c/p\u003e\u003cp\u003eSpeaking of iterations… we have them, technically. I think our Pivotal Tracker project is setup for weekly iterations starting each Monday. But it really doesn’t impact how we work. Velocity tracking is just for rough planning purposes. We don’t commit to any stories or numbers of stories in any given timeframe. We estimate stories. Our PO uses those estimates to plan releases, and we release whenever it makes sense. If there is a critical deadline, we work together with our PO to figure out the best way to prioritize those stories first. Functionality is pruned if required. The biggest goal is visibility. If a story is estimated at a 1 and we realize it is more complex than we thought, we have a conversation. That story could be split further, the complexity could be removed, or a simpler way suggested.\u003c/p\u003e\u003cp\u003eAfter standup, we have a habit of walking across the street to a nearby \u003ca href=\"http://www.metropolisdenver.com/lohi/\"\u003eMetropolis coffee\u003c/a\u003e. It inspires jealousy in other teams, but there is something about taking a few minutes to connect with each other before we dig into our workday in earnest. Difficult problems from the previous day are often resolved on this walk.\u003c/p\u003e\u003cp\u003eWhen we return, we have a quick discussion about the pairs for the day. We work in pairs all the time (except when someone’s out). Rotation is a balance between keeping someone on the “stream” that has context and filling our \u003ca href=\"https://en.wikipedia.org/wiki/Dance_card\"\u003edance card\u003c/a\u003e for the week. We try to make sure we all are exposed to every part of the system. The pairs are mixed up to keep fresh ideas flowing and maintain balance within the force. Streams are feature sets that group stories together. Since there are six of us, and we work in pairs, there are three streams going at any given time. Sometimes, two pairs will jump on the same stream to get it done sooner. Usually, each stream is separate and this allows us to avoid merge conflicts and inter-pair dependencies. We’re all working on the same system, but different vertical slices of functionality.\u003c/p\u003e\u003cp\u003eWith pairs decided, we get to work. Mihir and I paired today on a new feature that David and I worked on yesterday. Yesterday, David shared context with me, and today I passed that along to Mihir. Tomorrow, I expect Mihir will stay on that stream to share context with someone new while I join someone else and pickup context from another stream. This is how we avoid silos, jointly own all the code, and pass context of new ways to do things to each other. It’s amazing.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*andeivrFX6MqSSQ4\" /\u003e\u003c/figure\u003e\u003cp\u003eThroughout the day, whenever a pair feels they could use more input, they ping the entire team. We sit at open pairing workstations, so an impromptu dev meeting involves finishing your current thought and swiveling your chair to form a circle. We’ve somehow managed to create an egoless environment where everyone values and wants input from everyone else. Today, Lew and Joe pinged the whole team to share tips about the rspec upgrade they were working on.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*YiuXlHSR5x43u5Nw\" /\u003e\u003c/figure\u003e\u003cp\u003eWe usually play ping-pong once or twice during the day. It’s a great way to take a break, especially when stuck on a hard problem. Although it’s hard to tear yourself away, usually one of us will be thinking clearly enough to suggest a pong break. We almost always come back with a better plan of attack, even if that plan is to call a dev meeting for help.\u003c/p\u003e\u003cp\u003eWhen lunchtime comes around, sometimes we grab food and find a conference room to watch an episode of something interesting on Netflix. We informally reserve Fridays for team lunch out — a good way to connect and unwind.\u003c/p\u003e\u003cp\u003eIn the afternoon, it’s back to work! We use TDD to design and develop. Finding better ways to design code and test it are frequent dev meeting conversations. When to stub? What to cover at a unit-level vs. a higher-level test? We’re constantly making new “rules” (my word, others will dislike that word choice) that we try out and revisit often. We’re not afraid to experiment, but we make sure we’re doing it as a team. We’ve posted our \u003ca href=\"https://github.com/ATHN/athn_team\"\u003eteam values\u003c/a\u003e if you want to know more.\u003c/p\u003e\u003cp\u003eThat’s our typical day, but I may not have described the \u003cstrong\u003efun\u003c/strong\u003e very well. If Andrew’s not cracking us up, then we’re poking fun at each other or ourselves. It’s definitely a balance we’ve achieved between having fun and producing a ton of high quality work. We do both really well.\u003c/p\u003e\u003cfigure\u003e\u003cimg alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/1*aOd-mbx-byrP0fPEkXoMhA.jpeg\" /\u003e\u003c/figure\u003e\u003cimg src=\"https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=c55082d2e93a\" width=\"1\" height=\"1\"\u003e\u003chr\u003e\u003cp\u003e\u003ca href=\"https://medium.com/earthvectors/an-earthvectors-developers-life-c55082d2e93a\"\u003eAn EarthVectors developer’s life\u003c/a\u003e was originally published in \u003ca href=\"https://medium.com/earthvectors\"\u003eEarthVectors\u003c/a\u003e on Medium, where people are continuing the conversation by highlighting and responding to this story.\u003c/p\u003e"}]